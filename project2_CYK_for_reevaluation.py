def initialize_table(n):
    #table init
    return [[set() for _ in range(n)] for _ in range(n)]

def fill_diagonal(table, grammar, word):
    #print(grammar)
    #print(word)
    #print(table)
    #diagnal fill based on grammar
    n = len(word)
    #print(n)
    for i in range(n):
        for rule in grammar:#grammar (S,(N,det))
            if word[i] in rule[1]:
                table[i][i].add(rule[0])


# def build_left_hand_tree(grammar, word):
#     left_hand_tree = {}
#     for i, token in enumerate(word):
#         left_hand_tree[token] = set()
#         for left, right in grammar:
#             if token in right:
#                 left_hand_tree[token].add(left)
#     return left_hand_tree

# def print_left_hand_tree(tree, level=0):
#     for token, symbols in tree.items():
#         print('\t' * level + str(token))
#         if symbols:
#             print_left_hand_tree(symbols, level + 1)
            



def build_tree_from_table(table, grammar, word):
    n = len(word)
    word_tree = {}

    # Fill diagonal based on grammar rules
    for i in range(n):
        word_tree[(i, i)] = table[i][i]

    # Fill remaining cells using diagonal information
    for length in range(2, n + 1):
        for i in range(n - length + 1):
            j = i + length - 1
            for k in range(i, j):
                for rule in grammar:
                    if len(rule[1]) == 2 and (rule[1][0] in table[i][k] and rule[1][1] in table[k + 1][j]):
                        if (i, k) not in word_tree:
                            word_tree[(i, k)] = set()
                        if (k + 1, j) not in word_tree:
                            word_tree[(k + 1, j)] = set()
                        word_tree[(i, k)].add(rule[1][0])
                        word_tree[(k + 1, j)].add(rule[1][1])

    return word_tree

def print_tree(tree):
    for cell, symbols in tree.items():
        print(f"Cell {cell}: {', '.join(symbols)}")

            
def fill_remaining_cells(table, grammar, word):
    
    n = len(word)
    for length in range(2, n + 1):
        for i in range(n - length + 1):
            j = i + length - 1
            for k in range(i, j):
                for rule in grammar:
                    if len(rule[1]) == 2:
                        if rule[1][0] in table[i][k] and rule[1][1] in table[k + 1][j]:
                            table[i][j].add(rule[0])
    word_tree = build_tree_from_table(table, grammar, word)

# Print the derived non-terminals tree
    print("Derived Non-terminals Tree:")
    print_tree(word_tree)
    
def print_cyk_table(table):
    
    print("CYK Table:")
    for row in table:
        print(row)
        

def cyk_algorithm(grammar, word):
    """
    CYK algorithm  to check if a word/ sentence can be generated by a given grammar.

    
    Return:
    bool: True if the word/sentence can be generated by the grammar, False otherwise.
    """
    if not isinstance(grammar, list) or not all(isinstance(rule, tuple) and isinstance(rule[0], str) and isinstance(rule[1], list) for rule in grammar):
        print("Invalid gramer format. Expected a list of tuple.")
    
    if not isinstance(word, list):
        print("Invalid word format. Expected a list of words.")

    n = len(word)
    table = initialize_table(n)
    fill_diagonal(table, grammar, word)
    fill_remaining_cells(table, grammar, word)
   
    print_cyk_table(table)
    return 'S' in table[0][n - 1]


def get_user_input():
    print("Enter the grammar rules in CNF Chomky Normal Form (ex, S -> AB | BC):")
    grammar = []
    while True:
        rule = input("Rule (or 'done' to finish): ").strip()
        if rule.lower() == 'done':
            break
        if '->' in rule:
            parts = rule.split('->')
            left = parts[0].strip()
            right = [r.strip() for r in parts[1].split('|')]
            grammar.append((left, right))
        else:
            print("Invalid rule format. Please use '->' ")

    sentence = input("Enter a sentence to check: ").strip().split()

    return grammar, sentence

def main():
    custom_grammar, custom_sentence = get_user_input()
    result = cyk_algorithm(custom_grammar, custom_sentence)
    print(f"The sentence {' '.join(custom_sentence)} is{' ' if result else ' not '}recognized by the provided grammar.")

if __name__ == "__main__":
    main()

# Example usage with complex grammar and a longer sentence
complex_grammar = [
    ('S', ['NP', 'VP']),
    ('NP', ['Det', 'N']),
    ('VP', ['V', 'NP']),
    ('Det', ['the']),
    ('N', ['cat', 'dog']),
    ('V', ['chased', 'ate'])
    #('S', ['machinelearning', 'python'])
]

long_sentence = "the cat chased the dog".split()
print(long_sentence)


result = cyk_algorithm(complex_grammar, long_sentence)

print(f"The sentence {' '.join(long_sentence)} is{' ' if result else ' not '}recognized by the grammar.")
